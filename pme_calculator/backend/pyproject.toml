[project]
name = "pme_calculator"
version = "0.1.0"
description = "Professional Private Market Equivalent Calculator Backend"
authors = [
    {name = "PME Calculator Team", email = "team@pmecalculator.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["finance", "private-equity", "pme", "performance-measurement"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering :: Mathematics",
]

dependencies = [
    "fastapi==0.111.0",
    "pyarrow==16.*",
    "polars[all]==0.20.*",
    "pandera==0.18.*",
    "uvicorn[standard]==0.29.0",
    "pandas==2.2.2",
    "numpy==1.26.4",
    "numpy_financial==1.1.0",
    "scipy==1.14.0",
    "aiofiles==23.2.1",
    "python-multipart==0.0.9",
    "openpyxl==3.1.2",
    "xlrd==2.0.1",
    "python-dateutil==2.9.0",
    "pytz==2024.1",
    "greenlet==3.1.1",
    "sqlmodel==0.0.22",
    "asyncpg==0.30.0",
    "aioredis==2.0.*",
    "aiocache==0.12.*",
    "duckdb==0.10.*",
    "croniter==1.4.*",
]

[project.optional-dependencies]
dev = [
    "pytest==8.2.0",
    "pytest-asyncio==0.23.6",
    "pytest-cov==5.0.0",
    "black==24.4.0",
    "isort==5.13.2",
    "flake8==7.0.0",
    "mypy==1.10.0",
    "pre-commit==3.7.0",
]

test = [
    "pytest==8.2.0",
    "pytest-asyncio==0.23.6",
    "pytest-cov==5.0.0",
    "httpx==0.27.0",
    "faker==25.0.0",
]

docs = [
    "mkdocs==1.6.0",
    "mkdocs-material==9.5.18",
    "mkdocstrings[python]==0.25.0",
]

[project.urls]
Homepage = "https://github.com/pmecalculator/pme_calculator"
Documentation = "https://pmecalculator.readthedocs.io/"
Repository = "https://github.com/pmecalculator/pme_calculator.git"
Issues = "https://github.com/pmecalculator/pme_calculator/issues"

[project.scripts]
pme-server = "pme_calculator.main_minimal:main"
pme-health = "pme_calculator.health_check:main"

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["pme_calculator"]

[tool.hatch.build.targets.sdist]
include = [
    "/pme_calculator",
    "/tests",
    "/docs",
    "README.md",
    "LICENSE",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "numpy_financial.*",
    "openpyxl.*",
    "xlrd.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["pme_calculator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 